diff -Naur ORB_SLAM2/include/KeyFrameDatabase.h ORB_SLAM2_wopangolin/include/KeyFrameDatabase.h
--- ORB_SLAM2/include/KeyFrameDatabase.h	2016-10-16 16:35:06.000000000 +0300
+++ ORB_SLAM2_wopangolin/include/KeyFrameDatabase.h	2016-10-16 16:33:48.000000000 +0300
@@ -29,7 +29,7 @@
 #include "Frame.h"
 #include "ORBVocabulary.h"
 
-#include<mutex>
+#include <mutex>
 
 
 namespace ORB_SLAM2
diff -Naur ORB_SLAM2/include/System.h ORB_SLAM2_wopangolin/include/System.h
--- ORB_SLAM2/include/System.h	2016-10-16 16:35:06.000000000 +0300
+++ ORB_SLAM2_wopangolin/include/System.h	2016-10-16 16:33:48.000000000 +0300
@@ -23,24 +23,19 @@
 #define SYSTEM_H
 
 #include<string>
-#include<thread>
+#include <thread>
 #include<opencv2/core/core.hpp>
 
 #include "Tracking.h"
-#include "FrameDrawer.h"
-#include "MapDrawer.h"
 #include "Map.h"
 #include "LocalMapping.h"
 #include "LoopClosing.h"
 #include "KeyFrameDatabase.h"
 #include "ORBVocabulary.h"
-#include "Viewer.h"
 
 namespace ORB_SLAM2
 {
 
-class Viewer;
-class FrameDrawer;
 class Map;
 class Tracking;
 class LocalMapping;
@@ -110,6 +105,14 @@
     // SaveMap(const string &filename);
     // LoadMap(const string &filename);
 
+    // Map structure that stores the pointers to all KeyFrames and MapPoints.
+    Map* mpMap;
+    
+    // Tracker. It receives a frame and computes the associated camera pose.
+    // It also decides when to insert a new keyframe, create some new MapPoints and
+    // performs relocalization if tracking fails.
+    Tracking* mpTracker;
+    
 private:
 
     // Input sensor
@@ -121,13 +124,7 @@
     // KeyFrame database for place recognition (relocalization and loop detection).
     KeyFrameDatabase* mpKeyFrameDatabase;
 
-    // Map structure that stores the pointers to all KeyFrames and MapPoints.
-    Map* mpMap;
-
-    // Tracker. It receives a frame and computes the associated camera pose.
-    // It also decides when to insert a new keyframe, create some new MapPoints and
-    // performs relocalization if tracking fails.
-    Tracking* mpTracker;
+    
 
     // Local Mapper. It manages the local map and performs local bundle adjustment.
     LocalMapping* mpLocalMapper;
@@ -136,17 +133,11 @@
     // a pose graph optimization and full bundle adjustment (in a new thread) afterwards.
     LoopClosing* mpLoopCloser;
 
-    // The viewer draws the map and the current camera pose. It uses Pangolin.
-    Viewer* mpViewer;
-
-    FrameDrawer* mpFrameDrawer;
-    MapDrawer* mpMapDrawer;
 
     // System threads: Local Mapping, Loop Closing, Viewer.
     // The Tracking thread "lives" in the main execution thread that creates the System object.
     std::thread* mptLocalMapping;
     std::thread* mptLoopClosing;
-    std::thread* mptViewer;
 
     // Reset flag
     std::mutex mMutexReset;
diff -Naur ORB_SLAM2/include/Tracking.h ORB_SLAM2_wopangolin/include/Tracking.h
--- ORB_SLAM2/include/Tracking.h	2016-10-16 16:35:06.000000000 +0300
+++ ORB_SLAM2_wopangolin/include/Tracking.h	2016-10-16 16:33:48.000000000 +0300
@@ -25,8 +25,6 @@
 #include<opencv2/core/core.hpp>
 #include<opencv2/features2d/features2d.hpp>
 
-#include"Viewer.h"
-#include"FrameDrawer.h"
 #include"Map.h"
 #include"LocalMapping.h"
 #include"LoopClosing.h"
@@ -35,7 +33,6 @@
 #include"KeyFrameDatabase.h"
 #include"ORBextractor.h"
 #include "Initializer.h"
-#include "MapDrawer.h"
 #include "System.h"
 
 #include <mutex>
@@ -43,8 +40,6 @@
 namespace ORB_SLAM2
 {
 
-class Viewer;
-class FrameDrawer;
 class Map;
 class LocalMapping;
 class LoopClosing;
@@ -54,7 +49,7 @@
 {  
 
 public:
-    Tracking(System* pSys, ORBVocabulary* pVoc, FrameDrawer* pFrameDrawer, MapDrawer* pMapDrawer, Map* pMap,
+    Tracking(System* pSys, ORBVocabulary* pVoc, Map* pMap,
              KeyFrameDatabase* pKFDB, const string &strSettingPath, const int sensor);
 
     // Preprocess the input and call Track(). Extract features and performs stereo matching.
@@ -64,7 +59,6 @@
 
     void SetLocalMapper(LocalMapping* pLocalMapper);
     void SetLoopClosing(LoopClosing* pLoopClosing);
-    void SetViewer(Viewer* pViewer);
 
     // Load new settings
     // The focal lenght should be similar or scale prediction will fail when projecting points
@@ -114,6 +108,14 @@
     bool mbOnlyTracking;
 
     void Reset();
+    
+    //Map
+    Map* mpMap;
+    
+    //Calibration matrix
+    cv::Mat mK;
+    cv::Mat mDistCoef;
+    float mbf;
 
 protected:
 
@@ -172,19 +174,7 @@
     
     // System
     System* mpSystem;
-    
-    //Drawers
-    Viewer* mpViewer;
-    FrameDrawer* mpFrameDrawer;
-    MapDrawer* mpMapDrawer;
-
-    //Map
-    Map* mpMap;
 
-    //Calibration matrix
-    cv::Mat mK;
-    cv::Mat mDistCoef;
-    float mbf;
 
     //New KeyFrame rules (according to fps)
     int mMinFrames;
